# use to create a swarm template in Portainer
# don't forget to declare the ENV var REDIS_SERVER to the redis container name and
# STACK_BASE_PATH=folder_for_stack ; mkdir -p ${STACK_BASE_PATH}/data ${STACK_BASE_PATH}/logs

version: '3.7'

x-default-opts: 
  &default-opts
  deploy:
    restart_policy:
      condition: any
      delay: 5s
      max_attempts: 3
      window: 20s

x-vol-tz: &v-tz /etc/timezone:/etc/timezone:ro
x-vol-ltime: &v-ltime /etc/localtime:/etc/localtime:ro
x-vol-lgen: &v-lgen /etc/locale.gen:/etc/locale.gen:ro
x-vols: &vols
  - *v-tz
  - *v-ltime
  - *v-lgen

services:
  pyzor:
    image: neomediatech/pyzor-server:latest
    environment:
      WAITFOR: "redis:redis"
    hostname: pyzor
    <<: *default-opts    
    ports:
      - target: 24441
        published: 24441
        protocol: tcp
        mode: host
    volumes:
      - *v-tz
      - *v-ltime
      - *v-lgen
      - logs:/data/logs

  redis:
    image: redis:alpine
    hostname: redis
    command: ["redis-server", "--appendonly", "yes", "--bind", "0.0.0.0", "--protected-mode", "no", "--always-show-logo", "no", "--appendfsync", "no"]
    <<: *default-opts    
    volumes:
      - *v-tz
      - *v-ltime
      - *v-lgen
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STACK_BASE_PATH}/data
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STACK_BASE_PATH}/logs
